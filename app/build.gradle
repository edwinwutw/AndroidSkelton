apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    //Note: Although Gradle allows you to define project-wide properties at the module level, you should avoid doing so because it causes the modules that share those properties to be coupled. Module coupling makes it more difficult to later export a module as a stand-alone project and effectively prevents Gradle from utilizing parallel project execution to speed up multi-module builds.
    compileSdkVersion _compileSdkVersion
    //or
    //compileSdkVersion rootProject.ext._compileSdkVersion

    /**
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     *
     * If you're using Android plugin 3.0.0 or higher, this property is optionalâ€”
     * the plugin uses the minimum required version of the build tools by default.
     */
    //buildToolsVersion '26.0.2'

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {
        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.edwin.androidskelton"

        // Defines the minimum API level required to run the app.
        minSdkVersion 14

        // Specifies the API level used to test the app.
        targetSdkVersion 26

        // Defines the version number of your app.
        versionCode 1

        // Defines a user-friendly version name for your app.
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {
        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
        /**
         * The `initWith` property allows you to copy configurations from other build types,
         * then configure just the settings you want to change. This one copies the debug build
         * type, and then changes the manifest placeholder and application ID.
         */
        staging {
            initWith debug
            manifestPlaceholders = [hostName:"internal.edwin.androidskelton"]
            applicationIdSuffix ".debugStaging"
        }
    }

    // Specifies two flavor dimensions.
    flavorDimensions "default"

    /**
     * The productFlavors block is where you can configure multiple product
     * flavors. This allows you to create different versions of your app that can
     * override the defaultConfig block with their own settings. Product flavors are
     * optional, and the build system does not create them by default. This example
     * creates a free and paid product flavor. Each product flavor then specifies
     * its own application ID, so that they can exist on the Google Play Store, or
     * an Android device, simultaneously.
     *
     * If you're using Android plugin 3.0.0 or higher, you need to also declare
     * and assign each flavor to a flavor dimension. To learn more, read the
     * migration guide.
     */
    productFlavors {
        free {
            applicationIdSuffix ".free"
        }

        paid {
            applicationIdSuffix ".paid"
        }
    }

    /**
     * The splits block is where you can configure different APK builds that
     * each contain only code and resources for a supported screen density or
     * ABI. You'll also need to configure your build so that each APK has a
     * different versionCode.
     */
//    splits {
//        // Settings to build multiple APKs based on screen density.
//        density {
//
//            // Enable or disable building multiple APKs.
//            enable true
//
//            // Exclude these densities when building multiple APKs.
//            exclude "ldpi", "tvdpi", "xxxhdpi", "400dpi", "560dpi"
//        }
//    }

    dataBinding.enabled = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

/**
 * The dependencies block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 *
 * If you're using Android plugin 3.0.0 or higher, you should
 * use the new dependency configurations, which help you improve build speeds by
 * restricting which dependencies leak their APIs to other modules.
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$support_version"
    //or
    //implementation "com.android.support:appcompat-v7:${rootProject.ext.support_version}"
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "com.android.support.test:runner:$support_test_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$test_espresso_version"
    //butterknife
    implementation "com.jakewharton:butterknife:$butterknife_version"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknife_version"
    //material design
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:preference-v7:$support_version"
    // architecture room
    implementation "android.arch.persistence.room:runtime:$arch_version"
    annotationProcessor "android.arch.persistence.room:compiler:$arch_version"
    // architecture lifecycle
    implementation "android.arch.lifecycle:runtime:$arch_version"
    implementation "android.arch.lifecycle:extensions:$arch_version"
    annotationProcessor "android.arch.lifecycle:compiler:$arch_version"
    // firebase
    compile "com.firebase:firebase-jobdispatcher:$firebase_jobdispatcher_version"
}
